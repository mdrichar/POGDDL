(define (domain endgame)
(:requirements :strips :typing :pogddl :derived-predicates :fluents)
(:types card slot role phase)
(:constants
	dealer - slot
	chance p1 p2 - role
	dealing choosing showing scoring - phase
	all others u - other)
	
(:predicates
	(at ?c - card ?s - slot)
	(succeeds ?s1 ?s2 - slot)
	(current ?s - slot)
	(inphase ?p - phase)
	(whoseturn ?r - role)
	(oppof ?r ?other - role)
	(first ?p - role)
	(left ?s - slot)
	(right ?s - slot)
	(pending ?p - role)
	(selected ?s - slot)
	(viewed ?s - slot)
	(lastcard)
	(gameover)

)

(:functions
	(score ?p - role)
	(value ?c - card)
)

(:action deal
	:parameters (?dest ?next - slot ?c - card)
	:precondition (and
			(inphase dealing)
			(whoseturn chance)
			(succeeds ?next ?dest)
			(current ?dest)
			(at ?c dealer))
	:effect	(and
			(when (right ?dest) 
				(and 
					(not (whoseturn chance))
					(whoseturn p1)
					(not (inphase dealing))
					(inphase choosing)))
			(not (at ?c dealer))
			(at ?c ?dest)
			(not (current ?dest))
			(current ?next)
			(observe (all (dealt ?dest u)))))

(:action choose-left
	:parameters (?p ?o - role ?s1 ?s2 - slot)
	:precondition (and
			(inphase choosing)
			(whoseturn ?p)
			(oppof ?p ?o)
			(succeeds ?s2 ?s1)
			(not (right ?s1))
			(left ?s1))
	:effect (and
			(not (whoseturn ?p))
			(whoseturn chance)
			(not (inphase choosing))
			(inphase scoring)
			(selected ?s1)
			(not (left ?s1))
			(left ?s2)
			(observe (all (choseleft ?p ?s1)))
			(pending ?o)))

(:action peek-left
	:parameters (?p ?o - role ?s1 ?s2 - slot)
	:precondition (and
			(inphase choosing)
			(whoseturn ?p)
			(oppof ?p ?o)
			(not (viewed ?s2))
			(not (right ?s1))
			(left ?s1)
			(succeeds ?s2 ?s1))
	:effect (and
			(not (whoseturn ?p))
			(whoseturn chance)
			(not (inphase choosing))
			(inphase showing)
			(selected ?s2)
			(pending ?o)
			(observe (all (peekedleft ?p ?s2)))))

(:action choose-right
	:parameters (?p ?o - role ?s1 ?s2 - slot)
	:precondition (and
			(inphase choosing)
			(whoseturn ?p)
			(oppof ?p ?o)
			(succeeds ?s2 ?s1)
			(not (left ?s2))
			(right ?s2))
	:effect (and
			(not (whoseturn ?p))
			(whoseturn chance)
			(not (inphase choosing))
			(inphase scoring)
			(selected ?s2)
			(not (right ?s2))
			(right ?s1)
			(observe (all (choseright ?p ?s2)))
			(pending ?o)))

(:action peek-right
	:parameters (?p ?o - role ?s1 ?s2 - slot)
	:precondition (and
			(inphase choosing)
			(whoseturn ?p)
			(oppof ?p ?o)
			(not (left ?s2))
			(right ?s2)
			(not (viewed ?s1))
			(succeeds ?s2 ?s1))
	:effect (and
			(not (whoseturn ?p))
			(whoseturn chance)
			(not (inphase choosing))
			(inphase showing)
			(selected ?s1)
			(pending ?o)
			(observe (all (peekedright ?p ?s1)))))


(:action choose-last
	:parameters (?p ?o - role ?s1 - slot)
	:precondition (and
			(inphase choosing)
			(whoseturn ?p)
			(oppof ?p ?o)
			(right ?s1)
			(left ?s1))
	:effect (and
			(not (whoseturn ?p))
			(whoseturn chance)
			(not (inphase choosing))
			(inphase scoring)
			(selected ?s1)
			(not (left ?s1))
			(not (right ?s1))
			(lastcard)
			(observe (all (choselast ?p ?s1)))
			(pending ?o)))


(:action score-card
	:parameters (?p ?o - role ?s - slot ?c - card)
	:precondition (and
			(inphase scoring)
			(whoseturn chance)
			(pending ?o)
			(oppof ?p ?o)
			(selected ?s)
			(at ?c ?s))
	:effect (and
			(increase (score ?p) (value ?c))
			(not (inphase scoring))
			(when (not (lastcard)) 
				(and
					(whoseturn ?o)
					(inphase choosing)))
			(when (lastcard) 
				(gameover))
			(not (whoseturn chance))
			(not (pending ?o))
			(not (selected ?s))
			(observe (all (scored ?p ?c)))))


(:action show-card
	:parameters (?p ?o - role ?s - slot ?c - card)
	:precondition (and
			(inphase showing)
			(whoseturn chance)
			(pending ?o)
			(oppof ?p ?o)
			(selected ?s)
			(at ?c ?s))
	:effect (and
			(not (inphase showing))
			(inphase choosing)
			(not (whoseturn chance))
			(whoseturn ?o)
			(not (pending ?o))
			(not (selected ?s))
			(viewed ?s)
			(decrease (score ?p) 2)
			(observe (?p (shown ?p ?c ?s))
				 (?o (shown ?p u ?s)))))


(:gain ?p - role 1
	(and
		(gameover)
		(or
			(and
				(first ?p)
				(> (score p1) (score p2)))
			(and
				(not (first ?p))
				(>  (score p2) (score p1)))))
))
