
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 109
#define YY_END_OF_BUFFER 110
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[709] =
    {   0,
      107,  107,  110,  109,  104,  106,  109,    1,    2,   94,
       92,   93,   95,  107,  101,  109,   98,   64,   96,  100,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,    3,    4,  103,  104,   72,  107,
      108,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
       99,   97,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   52,  103,  103,  103,  103,  103,  103,  103,
      103,  108,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  103,   51,  103,    0,    0,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,   56,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,    0,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
      103,    0,  102,    0,    0,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,   57,  103,   75,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,   63,   62,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   17,    0,    0,    0,  103,  103,
      102,    0,    0,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   55,  103,  103,  103,  103,  103,    0,  103,
      103,  103,  103,  103,  103,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       23,    0,    0,   83,   80,  102,   44,    0,  103,  103,
       30,   31,  103,   58,   53,   54,  103,  103,  103,  103,
      103,  103,  103,    0,  103,  103,  103,  103,  103,   85,
       32,    0,    0,    0,    0,    0,    0,   60,    0,   46,
        0,    0,    0,    0,    0,    0,    0,    0,   65,   68,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    0,
        0,   66,    0,    7,    0,    9,    0,  103,    0,  103,
      103,  103,  103,  103,  103,  103,  103,  103,   82,    0,

      103,   59,  103,  103,  103,  103,    0,    0,    0,    0,
       37,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,   34,
        0,    0,    0,    0,    0,  103,   43,  103,   77,   73,
      103,  103,   76,  103,   70,   69,   45,  103,  103,   78,
       84,  103,    0,    0,    0,    0,    0,    0,   50,    0,
        0,    6,    0,    0,    0,    0,    0,    0,   67,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  103,  103,
      103,  103,  103,  103,  103,  103,  103,   40,   20,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   22,    0,

       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  103,  103,   91,  103,  103,   81,   79,  103,  103,
       74,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,    0,   21,    0,    0,    0,    0,
        0,    0,  103,  103,   90,   71,  103,  103,    0,   19,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,  103,   86,  103,
      103,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,   39,    0,    5,    0,    0,    0,   89,  103,
      103,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   87,  103,    0,    0,    0,
        0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
        0,   88,    0,    0,    0,    0,    0,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       24,   42,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,   28,    0,    0,    0,    0,    0,   41,    0,    0,
       15,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,    0,    0,
        0,    0,    0,    0,   27,    0,   29,    0,    0,    0,

        0,   13,    0,    0,   14,   11,   12,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[712] =
    {   0,
        0,   34,  529, 1734,   72, 1734,   36, 1734, 1734, 1734,
     1734,  498, 1734,   66,   83,  485,  470, 1734,  455, 1734,
      141,   68,  142,   70,  143,  147,  151,   76,  152,  177,
      158,  178,  183,  192, 1734, 1734,  221,   80, 1734,   74,
      423,  201,   67,  222,  228,  239,  238,  125,   73,   75,
       86,  148,  239,  175,  205,  241,  257,  194,  378, 1734,
     1734, 1734,    0,   78,  250,  292,  298,  308,  304,  310,
      312,  314,  322,  321,  328,  320,  334,   80,  327,  335,
      351,  361,   82,  378,  379,  220,  362,  383,  391,  395,
      396,  364,  300,  315,  319,  323,  345,  366,  363,  213,

      384,  371,  390,  388,  379,  378,  386,  392,  403,  396,
      396,  393,  415,  418,  396,  424,  429,  434,  421,  421,
      446,  430,  430,  439,  460,  157,  458,  489,  494,  442,
      466,  487,  496,  507,  509,  511,  513,  515,  521,  532,
      471,  537,  543,  165,  538,  544,  550,  557,  527,  564,
      574,  576,  570,  588,  449, 1734,  572,  485,  543,  571,
      572,  578,  357,  584,  574,  576,  585,  591,  595,  588,
      593,  587,  598,  601,  592,  611,  611,  619,  619,  627,
      622,  614,  614,  629,  623,  630,  637,  638,  623,  655,
      666,  338,  224,  636,  632,  639,  691,  692,  693,  697,

      698,  699,  703,  352,  704,  717,  667,  719,  727,  718,
      729,  743,  758,  760,  744,  766,  734,  764,  775,  663,
      690,  696,  738,  704,  720,  752,  725,  759,  755,  765,
      759,  760,  769,  768,  763, 1734, 1734,  765,  766,  765,
      777,  768,  789,  782,  792,  784,  791,  798,  808,  796,
      808,  817,  803,  809,  815,  808,  815,  825,  841,  843,
      303,  829,  835,  819,  848,  857,  872,  879,  877,  878,
      884,  875,  889,  891,  825,  900,  908,  907,  852,  909,
      914,  920,  921,  927,  934,  892,  906,  931,  920,  905,
      921,  922,  922,  919,  922,  932, 1734,  937,  299,  924,

      937,  949,  942,  944,  952,  948,  944,  953,  963,  960,
      959,  974,  963,  963,  975,  968,  975,  294,  969,  284,
     1734,  982,  975, 1003, 1004,  277, 1734,  983,  982, 1012,
     1013, 1025, 1027, 1031, 1032, 1033, 1004, 1009, 1041, 1022,
     1042, 1046, 1050, 1027, 1057, 1052, 1043, 1058, 1030, 1062,
     1734, 1036, 1040, 1073, 1038, 1072, 1075, 1734, 1067, 1734,
     1074, 1047, 1056, 1075, 1065, 1070, 1076, 1092, 1734, 1734,
     1074, 1081, 1096, 1083, 1734, 1101, 1109, 1108, 1098, 1108,
     1113, 1734, 1104, 1734, 1113, 1734, 1105, 1102, 1106,  274,
     1140, 1141, 1116, 1119, 1163, 1127, 1167, 1171, 1149, 1127,

     1176, 1180, 1133, 1143, 1186, 1151, 1163, 1159, 1160, 1166,
      265, 1163, 1170, 1180, 1184, 1164, 1173, 1188, 1734, 1184,
      233, 1185, 1190, 1734, 1189, 1197, 1194, 1187, 1195, 1734,
     1203, 1201, 1200, 1207, 1223, 1218, 1734, 1214, 1241, 1248,
     1228, 1228, 1252, 1224, 1256, 1260, 1734, 1266, 1226,    0,
     1268, 1240, 1244, 1244, 1250, 1245, 1251, 1259,  226,  222,
     1257, 1734, 1261, 1267, 1256, 1272, 1259,  215, 1734, 1263,
     1262, 1278, 1281, 1281, 1282, 1283, 1280, 1280, 1275, 1286,
     1285, 1290, 1302, 1319, 1304, 1319, 1318, 1324, 1734, 1308,
     1310, 1314, 1311, 1317, 1333, 1322, 1336, 1333, 1734, 1333,

     1734, 1325, 1323, 1334, 1327, 1339, 1343, 1336, 1354, 1341,
      211, 1350, 1361,    0, 1363, 1370, 1385,    0, 1372, 1375,
        0, 1370, 1364,  182, 1379, 1382, 1375, 1387, 1387, 1381,
     1391, 1389, 1379, 1734, 1384, 1734, 1381,  163, 1381, 1388,
     1395, 1391, 1396, 1406,    0,    0, 1393, 1408,  153, 1734,
     1412, 1417,  149, 1420, 1409, 1422,  120, 1415, 1431, 1432,
     1427, 1734, 1427, 1425, 1432, 1437, 1429, 1434,    0, 1445,
     1437, 1449, 1449, 1448, 1444, 1444, 1449, 1443, 1451, 1734,
     1466, 1469, 1734, 1458, 1734, 1473, 1468, 1476,    0, 1466,
     1471, 1485, 1486, 1490, 1477, 1475, 1483, 1490, 1483, 1482,

     1489, 1501, 1499,  119, 1507,    0, 1507, 1507, 1509, 1514,
     1512, 1517, 1510, 1511, 1525, 1734, 1518, 1530, 1515, 1525,
     1524,    0, 1539, 1544, 1529, 1547, 1540, 1535, 1541, 1553,
     1553, 1545, 1554, 1556, 1553, 1565, 1550, 1566, 1558, 1565,
     1734, 1734, 1562, 1571, 1569, 1571, 1568, 1585, 1572, 1576,
     1579, 1587, 1583, 1591, 1586, 1586, 1593, 1604, 1602, 1595,
     1734, 1734, 1608, 1607, 1616, 1612, 1614, 1734, 1608, 1607,
     1734, 1615, 1624, 1622, 1620, 1616, 1637, 1633, 1625, 1627,
     1627, 1636, 1634, 1643, 1641, 1649, 1734, 1651, 1645, 1650,
     1648, 1654, 1654, 1660, 1734, 1662, 1734, 1659, 1665, 1666,

     1662, 1734, 1665, 1666, 1734, 1734, 1734, 1734, 1731,  110,
       92
    } ;

static yyconst flex_int16_t yy_def[712] =
    {   0,
      708,    1,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  709,  708,  708,  708,  708,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  708,  708,  710,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  709,  708,
      708,  708,  711,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  710,  710,  710,  708,  708,  711,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      711,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  710,
      710,  708,  708,  708,  708,  711,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  711,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  710,  710,
      708,  708,  708,  711,  710,  710,  710,  710,  710,  710,
      710,  711,  710,  710,  711,  710,  710,  710,  708,  710,
      710,  710,  710,  710,  710,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  710,  710,  708,  708,  708,  711,  710,
      710,  710,  710,  710,  710,  710,  711,  711,  710,  711,
      710,  710,  710,  708,  710,  710,  711,  710,  711,  710,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  711,  708,  711,
      710,  710,  711,  711,  710,  711,  710,  710,  710,  708,

      710,  710,  711,  711,  710,  711,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  711,  708,  711,  710,  710,
      711,  711,  710,  711,  710,  710,  708,  710,  711,  711,
      710,  711,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  711,  711,
      711,  711,  711,  710,  711,  711,  711,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  711,  711,  711,  711,  711,  710,  711,  711,  711,
      711,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  711,  711,  711,  711,  711,  711,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  711,  711,  711,
      711,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  711,  711,
      711,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  711,  711,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  711,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,    0,  708,  708,
      708
    } ;

static yyconst flex_int16_t yy_nxt[1807] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   23,   24,   25,   22,   26,   27,   22,   22,
       22,   28,   29,   30,   31,   22,   22,   32,   33,   22,
       22,   34,   22,   22,   22,   35,   36,   21,   22,   22,
       23,   24,   25,   22,   26,   27,   22,   22,   28,   29,
       30,   31,   22,   22,   32,   33,   22,   22,   34,   22,
       22,   22,   37,   38,   39,   38,   41,   63,   40,   63,
       63,   38,   63,   38,   41,   63,   40,   63,   63,  141,
       63,   63,   63,   63,   63,   79,  111,   72,  112,   37,

       95,   39,   42,   80,   43,   44,   45,   46,   47,  113,
       48,   64,   73,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   79,  111,   72,  112,   95,  620,  579,
       42,   80,   43,   44,   45,   46,   47,  113,   48,   73,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       63,   63,   63,   63,   63,   63,   63,  110,  575,   63,
       63,   63,  572,   63,   63,   69,   63,   63,  114,   63,
       63,   65,  563,   66,   63,   70,   74,   63,   67,   68,
       75,   71,   76,   77,  110,   81,   63,   63,   78,   63,
       63,  551,   63,   69,   85,   63,  114,   82,   65,   86,

       66,   63,   70,   74,   63,   67,   68,   75,   71,   76,
       77,   87,   81,   83,  118,   78,   88,   84,   89,   90,
      542,   85,   93,   94,  502,   82,  124,   86,  119,   63,
       63,  495,   63,   63,  261,  494,  193,  162,   87,  149,
       83,  118,  466,   88,   84,   96,   89,   90,   91,   97,
       93,   94,  100,  124,   88,   98,  119,  108,  115,   63,
      101,   99,   63,  102,  120,  162,  105,  149,  103,  106,
      104,  109,  116,   96,  457,  117,   91,   97,  107,  121,
      100,   88,   98,  438,  122,  108,  115,  101,   99,  326,
      102,  125,  120,  385,  105,  103,  106,  104,  109,  116,

      123,   63,  117,  383,   63,  107,  121,   63,  364,  128,
       63,  129,  122,   63,  126,  326,   63,  130,  125,   63,
       63,   63,   63,   63,   63,  131,   63,  123,  132,   63,
       63,   63,   63,   63,   63,  127,   63,   63,  155,   63,
       63,  133,  126,   63,   63,  156,   63,   63,  134,  136,
      193,  157,  135,  131,  139,  140,  132,  137,  138,  158,
       63,  272,  127,   63,   63,  155,  229,  143,  133,  142,
       63,   63,  156,   63,   63,  134,   92,  136,  157,  135,
       60,  139,  159,  140,  137,  138,  158,   63,   63,  144,
       63,   63,   63,  150,  143,   63,  142,  160,  145,  161,

       63,  146,  147,   63,   63,   63,  163,   63,   63,  159,
      164,  167,  148,  165,  152,  166,  144,  168,  169,  170,
      150,  151,  171,  172,  160,  145,  161,  154,  174,  146,
      147,  175,  178,  153,  163,   92,  173,  164,  167,  148,
      176,  165,  152,  166,  168,  169,  177,  170,  151,  179,
      171,  172,  180,  182,  154,  174,  183,  184,  175,  178,
      153,  187,  181,  173,  188,  185,  189,   63,  176,   63,
       63,   62,   63,  196,  177,   63,  220,  179,   63,  190,
      180,  182,  186,  183,  184,  191,   61,   60,  187,  181,
      128,  188,  128,  185,  189,  128,   63,  128,  192,   63,

      196,  193,  197,  192,  220,   63,  193,  190,   63,  186,
       40,  207,  224,  191,  198,  199,   63,  194,   63,   63,
       63,   63,   63,   63,   63,   63,  200,   63,  708,  197,
       63,  195,  203,   63,  708,  201,   63,  204,  207,   63,
      224,   63,  198,  199,   63,  194,   63,   63,  202,   63,
       63,  205,   63,   63,  200,   63,   63,  214,  195,   63,
      203,  210,   63,  201,  208,  204,   63,  708,  206,   63,
      209,  225,  708,   63,  212,  202,   63,  213,  205,   63,
      211,  708,   63,   63,  214,   63,   63,  215,   63,  210,
      226,  227,  208,  216,  221,  206,  218,   63,  209,  225,

       63,  228,  212,  230,  233,  213,  231,  211,  217,  222,
      223,  219,  708,  232,  234,  215,  235,  239,  226,  227,
      236,  216,  221,  237,  218,  238,  240,  708,  241,  228,
      242,  230,  233,  231,  243,  217,  222,  223,  244,  219,
      232,  245,  234,  249,  235,  239,  250,  236,  246,  247,
      237,  248,  238,  251,  240,  241,  252,  254,  242,  253,
      255,  256,  243,  258,   63,  257,  244,   63,  262,  245,
      263,  249,  264,  250,  708,   63,  246,  247,   63,  248,
      251,  708,  708,  708,  252,  254,  253,  708,  255,  256,
      258,  260,  708,  257,  275,  262,  286,  263,  259,  264,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,  265,   63,   63,  287,  708,  260,
      267,  269,  275,  286,  266,  259,   63,   63,   63,   63,
       63,   63,  279,  271,  288,  268,   63,  270,   63,   63,
      274,   63,  265,   63,  290,  287,   63,  273,  267,  269,
      276,  266,   63,   63,  278,   63,   63,  708,  277,  291,
      271,  288,  268,  293,  270,  289,  280,   63,  274,   63,
       63,  290,   63,   63,  273,   63,   63,  276,   63,  292,
      294,  278,  283,  282,   63,  277,  291,   63,  281,  295,
      293,  285,  302,  289,  280,  296,  284,  297,  298,  299,

      300,  301,  303,  304,  305,  708,  306,  292,  294,  283,
      307,  282,  308,  309,  310,  281,  295,  311,  312,  285,
      302,  313,  296,  284,  297,  298,  299,  300,  301,  303,
      304,  314,  305,  306,  315,  316,  317,  320,  307,  308,
      309,  318,  310,  319,  311,  321,  312,  322,  323,  313,
       63,  327,   63,   63,  328,   63,  329,   63,  340,  314,
       63,  315,  708,  316,  317,  320,   63,  330,  318,   63,
      319,  344,  321,  708,  322,  325,  323,  708,  324,  327,
      331,   63,  328,  329,   63,  340,   63,   63,   63,   63,
       63,   63,  708,   63,  337,  330,   63,  338,   63,  344,

       63,   63,  325,   63,  332,  324,  333,  708,  331,   63,
      339,  708,   63,  334,  336,  335,   63,   63,   63,   63,
       63,   63,  337,   63,  351,  338,   63,  341,  356,  347,
       63,  332,   63,   63,  333,  342,  349,  346,  339,   63,
      334,  336,  335,   63,  352,  345,   63,  343,  348,  359,
      353,  351,  355,  357,  358,  341,  356,  360,  361,  362,
      363,  708,  365,  342,  366,  346,  350,  354,  367,  368,
      369,  352,  345,  370,  343,  371,  348,  359,  353,  355,
      357,  358,  372,  373,  360,  361,  374,  362,  363,  365,
      375,  376,  366,  350,  354,  377,  367,  368,  369,  378,

      379,  370,  380,  371,  381,  382,  384,  386,  708,  372,
      373,  387,  388,   63,  374,   63,   63,  375,  376,  389,
      390,   63,   63,  377,   63,   63,  378,  379,  393,  708,
      380,  381,  382,  384,   63,  386,   63,   63,  387,   63,
       63,   63,   63,   63,   63,   63,  389,  390,  394,  391,
       63,   63,  396,   63,   63,   63,  393,  400,   63,   63,
      392,   63,   63,  407,   63,  403,   63,   63,  406,   63,
       63,   63,  408,  399,   63,  394,  391,  410,  395,  396,
      401,  708,  404,  402,  400,  416,  397,  392,  417,  405,
      398,  407,  409,  403,  411,  406,  412,  415,  418,  408,

      413,  399,  419,  420,  410,  395,  421,  414,  401,  404,
      402,  422,  416,  397,  423,  417,  405,  398,  424,  425,
      409,  426,  411,  427,  412,  415,  418,  413,  428,  419,
      420,  429,  431,  421,  414,  430,  432,  708,  433,  422,
      434,  423,  435,  436,  437,  424,  444,  425,  426,   63,
       63,  427,   63,   63,  441,  442,  428,  447,   63,  429,
      431,   63,  430,  439,  432,  433,  449,  708,  434,  435,
      436,  437,   63,  440,  444,   63,   63,  450,  452,   63,
       63,  441,  442,   63,  447,   63,  443,  455,   63,   63,
      445,  439,   63,  449,  446,   63,  453,  454,   63,  456,

      440,  458,  459,  460,  450,  461,  452,  462,  448,  451,
      708,  463,  464,  468,  443,  455,  465,  467,  445,  469,
      470,  471,  446,  453,  454,  472,  456,  473,  458,  459,
      474,  460,  475,  461,  462,  448,  476,  451,  463,  477,
      464,  468,  478,  465,  467,  479,  469,  480,  470,  471,
       63,  481,  472,   63,  473,  482,  708,   63,  474,  475,
       63,   63,  483,  476,   63,   63,  477,  485,   63,   63,
      478,  487,   63,  479,  480,   63,  488,  486,   63,  481,
       63,  489,  490,  482,  491,  492,  493,  484,  497,  483,
      496,  498,  708,  499,  485,  500,  708,  501,  487,  503,

      504,  505,  506,  488,  507,  508,  509,  510,  489,  490,
      511,  491,  492,  512,  493,  484,  497,  496,  513,  498,
      499,  514,  515,  500,  501,  516,  503,  504,   63,  505,
      506,   63,  507,  508,  509,  510,  518,  511,  519,  520,
      512,  521,  517,  522,  527,  513,  523,  524,  514,  515,
      525,  526,  528,  516,  529,  530,  531,  532,  708,  533,
      534,  535,  537,  518,  536,  538,  519,  520,  539,  521,
      517,  522,  527,  523,  524,  540,  543,  525,  526,  541,
      528,  529,  544,  530,  531,  532,  533,  534,  545,  535,
      537,  536,  546,  538,   63,  539,  547,   63,  548,  708,

      549,  550,  552,  540,  543,  553,  541,  554,  555,  556,
      544,  557,  558,  559,  708,  560,  545,  561,  562,  564,
      546,  565,  566,  568,  547,  567,  548,  549,  550,  569,
      552,  570,  571,  553,  554,  573,  555,  556,  557,  574,
      558,  559,  560,  576,  561,  562,  564,  577,  565,  578,
      566,  568,  567,  580,  581,  582,  587,  569,  570,  583,
      571,  584,  585,  573,  586,  588,  589,  574,  590,  708,
      591,  576,  592,  593,  577,  594,  597,  578,  595,  596,
      580,  598,  581,  582,  587,  599,  583,  600,  584,  585,
      601,  586,  588,  589,  602,  603,  590,  591,  604,  605,

      592,  593,  606,  594,  597,  595,  596,  607,  598,  608,
      609,  610,  599,  611,  612,  600,  613,  614,  601,  615,
      616,  602,  617,  603,  618,  604,  619,  605,  621,  606,
      622,  623,  624,  625,  607,  626,  627,  608,  609,  610,
      611,  612,  628,  613,  629,  614,  615,  616,  630,  617,
      631,  632,  618,  633,  619,  634,  621,  635,  622,  623,
      624,  625,  636,  626,  627,  637,  708,  638,  639,  628,
      640,  629,  641,  642,  643,  644,  630,  631,  645,  632,
      633,  646,  634,  647,  635,  648,  649,  708,  650,  651,
      636,  652,  653,  637,  638,  654,  639,  640,  655,  641,

      642,  656,  643,  644,  657,  645,  658,  659,  667,  646,
      660,  647,  648,  661,  649,  650,  662,  651,  652,  663,
      653,  664,  654,  665,  666,  668,  655,  669,  656,  670,
      672,  657,  671,  658,  673,  659,  667,  660,  674,  675,
      661,  676,  679,  662,  677,  678,  663,  680,  664,  681,
      665,  666,  668,  682,  683,  669,  684,  670,  672,  671,
      685,  690,  673,  686,  687,  688,  674,  675,  689,  676,
      679,  677,  678,  691,  692,  680,  693,  681,  694,  708,
      682,  683,  695,  696,  684,  697,  698,  699,  685,  690,
      686,  687,  688,  700,  701,  689,  702,  703,  704,  705,

      691,  692,  706,  707,  693,  708,  694,  708,  708,  695,
      696,  708,  697,  698,  699,  708,  708,  708,  708,  708,
      700,  701,  708,  702,  703,  704,  705,  708,  708,  706,
      707,   59,   59,    3,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708
    } ;

static yyconst flex_int16_t yy_chk[1807] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   14,   22,   14,   24,
       22,   38,   24,   38,   40,   28,   40,   64,   28,   78,
       64,   83,   78,  711,   83,   28,   49,   24,   50,    2,

       43,    7,   15,   28,   15,   15,   15,   15,   15,   51,
       15,  710,   24,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   28,   49,   24,   50,   43,  604,  557,
       15,   28,   15,   15,   15,   15,   15,   51,   15,   24,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       21,   23,   25,   21,   23,   25,   26,   48,  553,   26,
       27,   29,  549,   27,   29,   23,  126,   31,   52,  126,
       31,   21,  538,   21,  144,   23,   25,  144,   21,   21,
       26,   23,   27,   27,   48,   29,   30,   32,   27,   30,
       32,  524,   33,   23,   31,   33,   52,   30,   21,   32,

       21,   34,   23,   25,   34,   21,   21,   26,   23,   27,
       27,   32,   29,   30,   54,   27,   33,   30,   34,   34,
      511,   31,   42,   42,  468,   30,   58,   32,   55,   86,
       37,  460,   86,   37,  193,  459,  193,  100,   32,   86,
       30,   54,  421,   33,   30,   44,   34,   34,   37,   44,
       42,   42,   45,   58,   37,   44,   55,   47,   53,   65,
       45,   44,   65,   45,   56,  100,   46,   86,   45,   46,
       45,   47,   53,   44,  411,   53,   37,   44,   46,   56,
       45,   37,   44,  390,   57,   47,   53,   45,   44,  326,
       45,   65,   56,  320,   46,   45,   46,   45,   47,   53,

       57,   66,   53,  318,   66,   46,   56,   67,  299,   68,
       67,   68,   57,   69,   66,  261,   69,   68,   65,   70,
       68,   71,   70,   72,   71,   69,   72,   57,   69,   76,
       74,   73,   76,   74,   73,   67,   79,   75,   93,   79,
       75,   70,   66,   77,   80,   94,   77,   80,   71,   73,
      192,   95,   72,   69,   76,   77,   69,   74,   75,   96,
       81,  204,   67,   81,  204,   93,  163,   80,   70,   79,
       82,   87,   94,   82,   87,   71,   92,   73,   95,   72,
       59,   76,   97,   77,   74,   75,   96,   84,   85,   81,
       84,   85,   88,   87,   80,   88,   79,   98,   82,   99,

       89,   84,   85,   89,   90,   91,  101,   90,   91,   97,
      102,  105,   85,  103,   89,  104,   81,  106,  107,  108,
       87,   88,  109,  110,   98,   82,   99,   91,  111,   84,
       85,  112,  115,   90,  101,   41,  110,  102,  105,   85,
      113,  103,   89,  104,  106,  107,  114,  108,   88,  116,
      109,  110,  117,  118,   91,  111,  119,  120,  112,  115,
       90,  122,  117,  110,  123,  121,  124,  127,  113,  125,
      127,   19,  125,  130,  114,  131,  155,  116,  131,  125,
      117,  118,  121,  119,  120,  127,   17,   16,  122,  117,
      128,  123,  128,  121,  124,  129,  132,  129,  128,  132,

      130,  128,  131,  129,  155,  133,  129,  125,  133,  121,
       12,  141,  158,  127,  132,  133,  134,  129,  135,  134,
      136,  135,  137,  136,  138,  137,  134,  138,    3,  131,
      139,  129,  137,  139,    0,  135,  149,  138,  141,  149,
      158,  140,  132,  133,  140,  129,  142,  145,  136,  142,
      145,  139,  143,  146,  134,  143,  146,  149,  129,  147,
      137,  145,  147,  135,  142,  138,  148,    0,  140,  148,
      143,  159,    0,  150,  147,  136,  150,  148,  139,  153,
      146,    0,  153,  151,  149,  152,  151,  150,  152,  145,
      160,  161,  142,  151,  157,  140,  153,  154,  143,  159,

      154,  162,  147,  164,  167,  148,  165,  146,  152,  157,
      157,  154,    0,  166,  168,  150,  169,  173,  160,  161,
      170,  151,  157,  171,  153,  172,  174,    0,  175,  162,
      176,  164,  167,  165,  177,  152,  157,  157,  178,  154,
      166,  179,  168,  181,  169,  173,  182,  170,  180,  180,
      171,  180,  172,  183,  174,  175,  184,  186,  176,  185,
      187,  188,  177,  189,  190,  188,  178,  190,  194,  179,
      195,  181,  196,  182,    0,  191,  180,  180,  191,  180,
      183,    0,    0,    0,  184,  186,  185,    0,  187,  188,
      189,  191,    0,  188,  207,  194,  220,  195,  190,  196,

      197,  198,  199,  197,  198,  199,  200,  201,  202,  200,
      201,  202,  203,  205,  197,  203,  205,  221,    0,  191,
      199,  201,  207,  220,  198,  190,  206,  210,  208,  206,
      210,  208,  211,  203,  222,  200,  209,  202,  211,  209,
      206,  211,  197,  217,  224,  221,  217,  205,  199,  201,
      208,  198,  212,  215,  210,  212,  215,    0,  209,  225,
      203,  222,  200,  227,  202,  223,  212,  213,  206,  214,
      213,  224,  214,  218,  205,  216,  218,  208,  216,  226,
      228,  210,  215,  214,  219,  209,  225,  219,  213,  229,
      227,  218,  238,  223,  212,  230,  216,  231,  232,  233,

      234,  235,  239,  240,  241,    0,  242,  226,  228,  215,
      243,  214,  244,  244,  245,  213,  229,  246,  247,  218,
      238,  248,  230,  216,  231,  232,  233,  234,  235,  239,
      240,  249,  241,  242,  250,  251,  252,  255,  243,  244,
      244,  253,  245,  254,  246,  256,  247,  257,  258,  248,
      259,  262,  260,  259,  263,  260,  264,  265,  275,  249,
      265,  250,    0,  251,  252,  255,  266,  265,  253,  266,
      254,  279,  256,    0,  257,  260,  258,    0,  259,  262,
      266,  267,  263,  264,  267,  275,  269,  270,  268,  269,
      270,  268,    0,  271,  272,  265,  271,  272,  273,  279,

      274,  273,  260,  274,  267,  259,  268,    0,  266,  276,
      274,    0,  276,  269,  271,  270,  278,  277,  280,  278,
      277,  280,  272,  281,  286,  272,  281,  276,  290,  282,
      283,  267,  282,  283,  268,  277,  284,  281,  274,  284,
      269,  271,  270,  285,  287,  280,  285,  278,  283,  293,
      288,  286,  289,  291,  292,  276,  290,  294,  295,  296,
      298,    0,  300,  277,  301,  281,  285,  288,  302,  303,
      304,  287,  280,  305,  278,  306,  283,  293,  288,  289,
      291,  292,  307,  308,  294,  295,  309,  296,  298,  300,
      310,  311,  301,  285,  288,  312,  302,  303,  304,  313,

      314,  305,  315,  306,  316,  317,  319,  322,    0,  307,
      308,  323,  324,  325,  309,  324,  325,  310,  311,  328,
      329,  330,  331,  312,  330,  331,  313,  314,  337,    0,
      315,  316,  317,  319,  332,  322,  333,  332,  323,  333,
      334,  335,  336,  334,  335,  336,  328,  329,  338,  330,
      339,  341,  340,  339,  341,  342,  337,  344,  342,  343,
      333,  346,  343,  352,  346,  347,  345,  348,  349,  345,
      348,  350,  353,  343,  350,  338,  330,  355,  339,  340,
      345,    0,  347,  346,  344,  362,  341,  333,  363,  348,
      342,  352,  354,  347,  356,  349,  357,  361,  364,  353,

      359,  343,  365,  366,  355,  339,  367,  359,  345,  347,
      346,  368,  362,  341,  371,  363,  348,  342,  372,  373,
      354,  374,  356,  376,  357,  361,  364,  359,  377,  365,
      366,  378,  380,  367,  359,  379,  381,    0,  383,  368,
      385,  371,  387,  388,  389,  372,  396,  373,  374,  391,
      392,  376,  391,  392,  393,  394,  377,  400,  399,  378,
      380,  399,  379,  391,  381,  383,  403,    0,  385,  387,
      388,  389,  395,  392,  396,  395,  397,  404,  406,  397,
      398,  393,  394,  398,  400,  401,  395,  409,  401,  402,
      397,  391,  402,  403,  398,  405,  407,  408,  405,  410,

      392,  412,  413,  414,  404,  415,  406,  416,  401,  405,
        0,  417,  418,  423,  395,  409,  420,  422,  397,  425,
      426,  427,  398,  407,  408,  428,  410,  429,  412,  413,
      431,  414,  432,  415,  416,  401,  433,  405,  417,  434,
      418,  423,  435,  420,  422,  436,  425,  438,  426,  427,
      439,  441,  428,  439,  429,  442,    0,  440,  431,  432,
      440,  443,  444,  433,  443,  445,  434,  449,  445,  446,
      435,  452,  446,  436,  438,  448,  453,  451,  448,  441,
      451,  454,  455,  442,  456,  457,  458,  448,  463,  444,
      461,  464,    0,  465,  449,  466,    0,  467,  452,  470,

      471,  472,  473,  453,  474,  475,  476,  477,  454,  455,
      478,  456,  457,  479,  458,  448,  463,  461,  480,  464,
      465,  481,  482,  466,  467,  483,  470,  471,  484,  472,
      473,  484,  474,  475,  476,  477,  485,  478,  486,  486,
      479,  487,  484,  488,  494,  480,  490,  491,  481,  482,
      492,  493,  495,  483,  496,  497,  498,  500,    0,  502,
      503,  504,  506,  485,  505,  507,  486,  486,  508,  487,
      484,  488,  494,  490,  491,  509,  512,  492,  493,  510,
      495,  496,  513,  497,  498,  500,  502,  503,  515,  504,
      506,  505,  516,  507,  517,  508,  519,  517,  520,    0,

      522,  523,  525,  509,  512,  526,  510,  527,  528,  529,
      513,  530,  531,  532,    0,  533,  515,  535,  537,  539,
      516,  540,  541,  543,  519,  542,  520,  522,  523,  544,
      525,  547,  548,  526,  527,  551,  528,  529,  530,  552,
      531,  532,  533,  554,  535,  537,  539,  555,  540,  556,
      541,  543,  542,  558,  559,  560,  566,  544,  547,  561,
      548,  563,  564,  551,  565,  567,  568,  552,  570,    0,
      571,  554,  572,  573,  555,  574,  577,  556,  575,  576,
      558,  578,  559,  560,  566,  579,  561,  581,  563,  564,
      582,  565,  567,  568,  584,  586,  570,  571,  587,  588,

      572,  573,  590,  574,  577,  575,  576,  591,  578,  592,
      593,  594,  579,  595,  596,  581,  597,  598,  582,  599,
      600,  584,  601,  586,  602,  587,  603,  588,  605,  590,
      607,  608,  609,  610,  591,  611,  612,  592,  593,  594,
      595,  596,  613,  597,  614,  598,  599,  600,  615,  601,
      617,  618,  602,  619,  603,  620,  605,  621,  607,  608,
      609,  610,  623,  611,  612,  624,    0,  625,  626,  613,
      627,  614,  628,  629,  630,  631,  615,  617,  632,  618,
      619,  633,  620,  634,  621,  635,  636,    0,  637,  638,
      623,  639,  640,  624,  625,  643,  626,  627,  644,  628,

      629,  645,  630,  631,  646,  632,  647,  648,  656,  633,
      649,  634,  635,  650,  636,  637,  651,  638,  639,  652,
      640,  653,  643,  654,  655,  657,  644,  658,  645,  659,
      663,  646,  660,  647,  664,  648,  656,  649,  665,  666,
      650,  667,  672,  651,  669,  670,  652,  673,  653,  674,
      654,  655,  657,  675,  676,  658,  677,  659,  663,  660,
      678,  683,  664,  679,  680,  681,  665,  666,  682,  667,
      672,  669,  670,  684,  685,  673,  686,  674,  688,    0,
      675,  676,  689,  690,  677,  691,  692,  693,  678,  683,
      679,  680,  681,  694,  696,  682,  698,  699,  700,  701,

      684,  685,  703,  704,  686,    0,  688,    0,    0,  689,
      690,    0,  691,  692,  693,    0,    0,    0,    0,    0,
      694,  696,    0,  698,  699,  700,  701,    0,    0,  703,
      704,  709,  709,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL;
extern "C" int yywrap();

#line 1061 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "pddl+.lex"

#line 1171 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 709 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1734 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return POGDDL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return GAIN;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return AND;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return OR;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return OBSERVE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{return Q;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 129 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 139 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 152 "pddl+.lex"
;
	YY_BREAK
case 105:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 153 "pddl+.lex"
;
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 154 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 156 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 157 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 159 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1822 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 709 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 709 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 708);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 159 "pddl+.lex"




extern "C++" {
  int yyFlexLexer::yywrap()
{
	return 1;
};
};


